# Team-J-Project

Team name: Team J

Database schema explanation:
Table: users
Description: Record down the user who registered an account. Record full name, id, hashed id, profile picture name.

Table: posts
Description: Record down the postid, title, content, create time, vote count, user who created this post. Used later for displaying content of posts.

Table: vote
Description: Record down post id and user id and an unique id generated by server. This will tell if a specific user has voted for a specific post.

API: /register
Description: Display the page for users to register, input their information.

API: /createUser
Description: Collect info sent by the user, and record it down in the database. If the user didn’t upload a profile picture, will use the default profile picture instead. It will rename the profile picture in specific format.

API: /<hashedcode>/create
Description: Show the page for the user to create a post. Record title and content of post.

API: /create_done
Description: Collect information inputted by the user and store it into the database.

API: /posts/<postid>/<hashedcode>
Description: Read the post, show the information of the post. Also allow the user to vote when reading.

API: /<hashedcode>/profile/<pagenum>
Description: Profile page with pagination. Show the information of the profile for a specific page. It will display posts created by the certain user. It will also calculate how long has it been since the post was created and display the time.

API: /<hashedcode>/feed/<pagenum>
Description: Feed page that will display the posts that weren’t created by the current user. It will also calculate how long has it been since the post was created and display the time.

API: /vote
Description: When the user decided to vote for a specific page, will first check in the database if the user has voted for the post before. If not, then add a row to the vote table with userid and postid and unique id generated by server. It will return a new count. If the user has voted, it won’t make modification to the database. It will return with message that the user has voted.

API: /delete
Description: If a user decided to delete a post. It will first check if the post exists. If it doesn't exist, it will return an error message. Otherwise, it will delete the record for the post in the vote table and in the posts table.

